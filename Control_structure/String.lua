--Lua字符串包含很多强大的字符操作函数.字符串库中的所有函数都导出在模块string中.在Lua5.1中,它还将这些函数导出作为string类型的方法.这样假设要返回一个字符串转的大写形式,可以写成ans = string.upper(s),也能写成ans = s:upper();为了避免与之前版本不兼容,此处使用前者.
--Lua字符串总是由字节构成的.Lua核心并不尝试理解具体的字符集编码(如GBK和UTF-8这样的多字节字符编码)
--需要特别注意的一点是,Lua字符串内部用来表示各个组成字节的下标是从1开始的,这不同于C和Perl这样的编程语言.这样数字符串位置的时候再也不用调整,对于非专业的开发者来说可能也是一个好事情,string.sub(str, 3, 7)直接表示从第三个字符开始到第七个字符(含)为止的子串.
--string.byte(s[,i[,j]])
--返回字符s[i]、s[i + 1]、s[i + 2]、...s[j]所对应的ASCII码。i的默认值为1，即第一个字节，j默认值为1
print(string.byte("abc", 1, 3))
print(string.byte("abc", 3))		--缺少第三个参数，第三个参数默认与第二个相同，此时为3
print(string.byte("abc"))  --缺少第二个和第三个参数，此时这两个参数都默认为1

--由于string.byte只返回整数，而并不像string.sub等函数那样（尝试）创建新的Lua字符串，因此使用string.byte来进行字符串相关的扫描和分析是最为高效的，尤其是在被LuaJIT2所JIT编译之后。


