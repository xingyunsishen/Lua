Lua的涉及有一点很奇怪，在一个block中的变量，如果之前没有定义过，那么认为
它是一个全局变量，而不是这个block的局部变量。这点跟其他语言有些不同。容易造成不小心覆盖了全局同名变量的错误。

定义
Lua中的局部变量要用local关键字来显式定义，不使用local显式定义的变量就是全局变量

作用于见test.lua

使用局部变量的好处
1.局部变量可以避免因为命名问题污染了全局环境
2.local变量的访问比全局变量更快
3.由于局部变量出了作用域之后生命周期结束，这样可以被垃圾回收器及时释放

常见实现如：local print = print

在Lua中，应该尽量让定义变量的语句靠近使用变量的语句，这也可以被看作是一种良好的编程风格。在C这样的语言中，强制程序员在一个块（或一个过程中）的起始处声明所有的局部变量，所以有些程序员认为在一个块的中间使用声明语句是一种不良好地习惯。实际上，在需要时才声明的变量并且赋予有意义的初值，这样可以提高代码的可读性。对于程序员而言，相比在块中任意位置顺手声明自己需要的变量，和必须跳转到块的起始处声明，相比而言优缺点很明显了
“尽量使用局部变量”是一种良好的编程风格。然而初学者在使用Lua时，很容易忘记加上local来定义局部变量，这时变量就会自动变成全局变量，很可能导致程序出现意想不到的问题。那么如何避免这些问题呢？如何检测哪些时局部变量，哪些时全局变量？
--体验下foo.lua和use_foo.lua

无论时做基础模块或是上层应用，肯定都不希望存在这类灰色情况，因为它的存在
会给系统带来跟多不确定性，（Open Resty回限制请求过程中全局变量的使用），
生产环境中我们是要尽力避免这种情况测出现。

Lua上下文中应当严格避免使用自己定义的全局变量。可以使用一个lj-releng工具
来扫描Lua代码，定位使用Lua全局变量的地方。lj-releng：htps://github.com/op
enresty/openresty-devel-utils/blob.master/lj-releng


